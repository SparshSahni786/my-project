HTML and CSS Structure
The HTML sets up the page's basic structure, while the CSS handles its styling and layout.

  * Custom CSS in <style> tag: This block contains all the styling for the page, defining colors, fonts, and layout. It uses
    a custom-written approach to style elements, including variables for consistent colors, shadows, and spacing.

  * <div class="canvas-container">: This div acts as the main container for the drawing area and the toolbar. Its CSS defines 
    its size, border, shadow, and rounded corners, creating a distinct visual section on the page.

  * <svg id="drawing-canvas">: This is the core element of the application. The <svg> tag provides a scalable vector graphic 
    surface where all the drawing paths are created and rendered.

  * <div class="toolbar" id="toolbar">: This is the control center for the drawing tool. Its CSS positions it at the top of the 
    canvas, giving it a floating appearance with a subtle shadow and rounded corners. It contains the controls for color and stroke width.

  * <div class="toolbar-options" id="color-options"> and <div class="toolbar-options" id="stroke-options">: These divs are special 
    containers where the JavaScript dynamically adds the color and stroke width buttons. This keeps the HTML clean and makes it easy 
    to add more options in the future.

  * <button class="clear-btn" id="clear-canvas">: This button, styled with a distinct red color and a trash can icon, is responsible 
    for clearing all the drawings from the canvas.


JavaScript Functionality
The JavaScript code gives the page its core functionality, managing the drawing process and user interactions.

  * <script>...</script>: This tag encloses all the JavaScript code that brings the drawing tool to life.

  * const svg = ...; const colorOptionsContainer = ...;: These lines get a reference to all the key HTML elements we'll be interacting 
    with, making it easier to manipulate them in the script.

  * let state = { ... };: This object acts as the brain of the application, storing the current drawing color, stroke width, and all the 
    paths that have been drawn. It's a simple but effective way to manage the app's data.

  * setupToolbar(): This function is called once the page loads. It dynamically creates and appends the color and stroke buttons to the 
    toolbar using a loop. It also sets up event listeners for each button so the app knows when a user changes their tool.

  * updateActiveButtons(): A helper function that makes sure the currently selected color and stroke width buttons are visually highlighted 
    with the "active" class. It runs every time a user makes a new selection.

  * getPointInSvg(event): This function is crucial for drawing. It takes a mouse event and calculates the exact coordinates of the mouse on 
    the SVG canvas, regardless of where the canvas is on the user's screen.

  * redrawCanvas(): This function handles the drawing logic. It first clears the entire canvas (svg.innerHTML = '') and then redraws all 
    the stored paths from the state.paths array, plus the current path being drawn. This "clear and redraw" method ensures everything is 
    always up-to-date and correctly rendered.

  * Event Listeners (mousedown, mousemove, etc.): The code listens for mouse events on the SVG element to manage the drawing.

    ->  mousedown: Triggers startDrawing(), setting the isDrawing state to true and starting a new path.

    ->  mousemove: Triggers draw(), which adds the mouse's current coordinates to the currentPath array as the user drags their mouse.

    ->  mouseup or mouseleave: Triggers stopDrawing(), which adds the currentPath to the paths array and resets the isDrawing state.

  * clearCanvas(): This function is tied to the "Clear" button. It simply empties the paths and currentPath arrays in the state object and 
    calls redrawCanvas(), effectively wiping the slate clean.
