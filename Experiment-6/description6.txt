HTML and CSS Structure
The HTML sets up the page's basic structure, while the CSS handles its styling and layout.

  * Custom CSS in <style> tag: This block contains all the styling for the page, defining the layout with Flexbox 
    for centering, as well as the appearance of the container and drawing area.

  * <div class="container">: This div serves as the main content wrapper. Its CSS centers it on the page and provides 
    a border, padding, and a subtle box shadow, giving it a clean, framed look.

  * <svg id="drawingArea">: This is the core element of the application. The <svg> tag provides a scalable vector graphic 
    surface with a defined size, border, and background, acting as the interactive canvas for drawing.


JavaScript Functionality
The JavaScript code gives the page its core functionality, enabling the drawing behavior.

  * <script>...</script>: This tag encloses the JavaScript code that manages the drawing process.

  * const svg = document.getElementById("drawingArea");: This line gets a reference to the SVG element, allowing the script 
    to manipulate it directly.

  * let drawing = false;: This boolean variable acts as a simple state tracker to determine if the user is currently drawing 
    (i.e., if the mouse button is held down).

  * let path;: This variable holds a reference to the SVG <path> element that is being drawn.

  * Event Listeners (mousedown, mousemove, etc.): The code listens for mouse events on the SVG element to manage the drawing.

  * mousedown: When the mouse button is pressed, it sets drawing to true and creates a new <path> element. It also sets the 
    starting point (M command) of the path to the current mouse coordinates (e.offsetX, e.offsetY).

  * mousemove: If drawing is true, this event appends a new line segment (L command) to the existing path using the current 
    mouse coordinates.

  * mouseup or mouseleave: Both events set drawing to false, ending the current drawing action.

This simple event-driven model allows the code to dynamically create and extend a vector path as the user draws, without 
the need for complex state management or redrawing the entire canvas.